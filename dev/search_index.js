var documenterSearchIndex = {"docs":
[{"location":"api/bayesian_regression/#Bayesian-Regression-Models","page":"Bayesian Regression Models","title":"Bayesian Regression Models","text":"","category":"section"},{"location":"api/bayesian_regression/","page":"Bayesian Regression Models","title":"Bayesian Regression Models","text":"BayesianRegression","category":"page"},{"location":"api/bayesian_regression/#CRRao.BayesianRegression","page":"Bayesian Regression Models","title":"CRRao.BayesianRegression","text":"BayesianRegression{RegressionType}\n\nType to represent bayesian regression models returned by fitmodel functions. This type is used internally by the package to represent all bayesian regression models. RegressionType is a Symbol representing the model class.\n\n\n\n\n\n","category":"type"},{"location":"api/bayesian_regression/#Linear-Regression","page":"Bayesian Regression Models","title":"Linear Regression","text":"","category":"section"},{"location":"api/bayesian_regression/","page":"Bayesian Regression Models","title":"Bayesian Regression Models","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LinearRegression, prior::Prior_Ridge, h::Float64 = 0.01, sim_size::Int64 = 10000)\nfitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LinearRegression, prior::Prior_Laplace, h::Float64 = 0.01, sim_size::Int64 = 10000)\nfitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LinearRegression, prior::Prior_Cauchy, sim_size::Int64 = 10000)\nfitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LinearRegression, prior::Prior_TDist, h::Float64 = 2.0, sim_size::Int64 = 10000)\nfitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LinearRegression, prior::Prior_Uniform, h::Float64 = 0.01, sim_size::Int64 = 10000)","category":"page"},{"location":"api/bayesian_regression/#CRRao.fitmodel","page":"Bayesian Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LinearRegression, prior::Prior_Ridge, h::Float64 = 0.01, sim_size::Int64 = 10000)\n\nFit a Bayesian Linear Regression model on the input data with a Ridge prior.\n\n\n\n\n\n","category":"function"},{"location":"api/bayesian_regression/#CRRao.fitmodel-2","page":"Bayesian Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LinearRegression, prior::Prior_Laplace, h::Float64 = 0.01, sim_size::Int64 = 10000)\n\nFit a Bayesian Linear Regression model on the input data with a Laplace prior.\n\n\n\n\n\n","category":"function"},{"location":"api/bayesian_regression/#CRRao.fitmodel-3","page":"Bayesian Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LinearRegression, prior::Prior_Cauchy, sim_size::Int64 = 10000)\n\nFit a Bayesian Linear Regression model on the input data with a Cauchy prior.\n\n\n\n\n\n","category":"function"},{"location":"api/bayesian_regression/#CRRao.fitmodel-4","page":"Bayesian Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LinearRegression, prior::Prior_TDist, h::Float64 = 2.0, sim_size::Int64 = 10000)\n\nFit a Bayesian Linear Regression model on the input data with a t(ν) distributed prior.\n\n\n\n\n\n","category":"function"},{"location":"api/bayesian_regression/#CRRao.fitmodel-5","page":"Bayesian Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LinearRegression, prior::Prior_Uniform, h::Float64 = 0.01, sim_size::Int64 = 10000)\n\nFit a Bayesian Linear Regression model on the input data with a Uniform prior.\n\n\n\n\n\n","category":"function"},{"location":"api/bayesian_regression/#Logistic-Regression","page":"Bayesian Regression Models","title":"Logistic Regression","text":"","category":"section"},{"location":"api/bayesian_regression/","page":"Bayesian Regression Models","title":"Bayesian Regression Models","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::CRRaoLink, prior::Prior_Ridge, h::Float64 = 0.1, level::Float64 = 0.95, sim_size::Int64 = 10000)\nfitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::CRRaoLink, prior::Prior_Laplace, h::Float64 = 0.1, level::Float64 = 0.95, sim_size::Int64 = 10000)\nfitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::CRRaoLink, prior::Prior_Cauchy, h::Float64 = 0.1, level::Float64 = 0.95, sim_size::Int64 = 10000)\nfitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::CRRaoLink, prior::Prior_TDist, h::Float64 = 1.0, level::Float64 = 0.95, sim_size::Int64 = 10000)\nfitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::CRRaoLink, prior::Prior_Uniform, h::Float64 = 0.01, level::Float64 = 0.95, sim_size::Int64 = 10000)","category":"page"},{"location":"api/bayesian_regression/#CRRao.fitmodel-6","page":"Bayesian Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::CRRaoLink, prior::Prior_Ridge, h::Float64 = 0.1, level::Float64 = 0.95, sim_size::Int64 = 10000)\n\nFit a Bayesian Logistic Regression model on the input data with a Ridge prior with the provided Link function.\n\n\n\n\n\n","category":"function"},{"location":"api/bayesian_regression/#CRRao.fitmodel-7","page":"Bayesian Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::CRRaoLink, prior::Prior_Laplace, h::Float64 = 0.1, level::Float64 = 0.95, sim_size::Int64 = 10000)\n\nFit a Bayesian Logistic Regression model on the input data with a Laplace prior with the provided Link function.\n\n\n\n\n\n","category":"function"},{"location":"api/bayesian_regression/#CRRao.fitmodel-8","page":"Bayesian Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::CRRaoLink, prior::Prior_Cauchy, h::Float64 = 0.1, level::Float64 = 0.95, sim_size::Int64 = 10000)\n\nFit a Bayesian Logistic Regression model on the input data with a Cauchy prior with the provided Link function.\n\n\n\n\n\n","category":"function"},{"location":"api/bayesian_regression/#CRRao.fitmodel-9","page":"Bayesian Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::CRRaoLink, prior::Prior_TDist, h::Float64 = 1.0, level::Float64 = 0.95, sim_size::Int64 = 10000)\n\nFit a Bayesian Logistic Regression model on the input data with a T-Dist prior with the provided Link function.\n\n\n\n\n\n","category":"function"},{"location":"api/bayesian_regression/#CRRao.fitmodel-10","page":"Bayesian Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::CRRaoLink, prior::Prior_Uniform, h::Float64 = 0.01, level::Float64 = 0.95, sim_size::Int64 = 10000)\n\nFit a Bayesian Logistic Regression model on the input data with a Uniform prior with the provided Link function.\n\n\n\n\n\n","category":"function"},{"location":"api/bayesian_regression/#Negative-Binomial-Regression","page":"Bayesian Regression Models","title":"Negative Binomial Regression","text":"","category":"section"},{"location":"api/bayesian_regression/","page":"Bayesian Regression Models","title":"Bayesian Regression Models","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::NegBinomRegression, prior::Prior_Ridge, h::Float64 = 0.1, sim_size::Int64 = 10000)\nfitmodel(formula::FormulaTerm, data::DataFrame, modelClass::NegBinomRegression, prior::Prior_Laplace, h::Float64 = 0.01, sim_size::Int64 = 10000)\nfitmodel(formula::FormulaTerm, data::DataFrame, modelClass::NegBinomRegression, prior::Prior_Cauchy, h::Float64 = 1.0, sim_size::Int64 = 10000)\nfitmodel(formula::FormulaTerm, data::DataFrame, modelClass::NegBinomRegression, prior::Prior_TDist, h::Float64 = 1.0, sim_size::Int64 = 10000)\nfitmodel(formula::FormulaTerm, data::DataFrame, modelClass::NegBinomRegression, prior::Prior_Uniform, h::Float64 = 0.1, sim_size::Int64 = 10000)","category":"page"},{"location":"api/bayesian_regression/#CRRao.fitmodel-11","page":"Bayesian Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::NegBinomRegression, prior::Prior_Ridge, h::Float64 = 0.1, sim_size::Int64 = 10000)\n\nFit a Bayesian Negative Binomial Regression model on the input data with a Ridge prior.\n\n\n\n\n\n","category":"function"},{"location":"api/bayesian_regression/#CRRao.fitmodel-12","page":"Bayesian Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::NegBinomRegression, prior::Prior_Laplace, h::Float64 = 0.01, sim_size::Int64 = 10000)\n\nFit a Bayesian Negative Binomial Regression model on the input data with a Laplace prior.\n\n\n\n\n\n","category":"function"},{"location":"api/bayesian_regression/#CRRao.fitmodel-13","page":"Bayesian Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::NegBinomRegression, prior::Prior_Cauchy, h::Float64 = 1.0, sim_size::Int64 = 10000)\n\nFit a Bayesian Negative Binomial Regression model on the input data with a Cauchy prior.\n\n\n\n\n\n","category":"function"},{"location":"api/bayesian_regression/#CRRao.fitmodel-14","page":"Bayesian Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::NegBinomRegression, prior::Prior_TDist, h::Float64 = 1.0, sim_size::Int64 = 10000)\n\nFit a Bayesian Negative Binomial Regression model on the input data with a t(ν) distributed prior.\n\n\n\n\n\n","category":"function"},{"location":"api/bayesian_regression/#CRRao.fitmodel-15","page":"Bayesian Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::NegBinomRegression, prior::Prior_Uniform, h::Float64 = 0.1, sim_size::Int64 = 10000)\n\nFit a Bayesian Negative Binomial Regression model on the input data with a Uniform prior. Ibrahim and Laud (JASA, 1990) showed that the uniform flat priors for GLMs can lead to improper posterior distributions thus making them undesirable. In such cases, the Markov Chain struggles to converge. Even if it converges, results are unreliable.\n\n\n\n\n\n","category":"function"},{"location":"api/bayesian_regression/#Poisson-Regression","page":"Bayesian Regression Models","title":"Poisson Regression","text":"","category":"section"},{"location":"api/bayesian_regression/","page":"Bayesian Regression Models","title":"Bayesian Regression Models","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::PoissonRegression, prior::Prior_Ridge, h::Float64 = 0.1, sim_size::Int64 = 10000)\nfitmodel(formula::FormulaTerm, data::DataFrame, modelClass::PoissonRegression, prior::Prior_Laplace, h::Float64 = 0.1, sim_size::Int64 = 10000)\nfitmodel(formula::FormulaTerm, data::DataFrame, modelClass::PoissonRegression, prior::Prior_Cauchy, h::Float64 = 1.0, sim_size::Int64 = 10000)\nfitmodel(formula::FormulaTerm, data::DataFrame, modelClass::PoissonRegression, prior::Prior_TDist, h::Float64 = 2.0, sim_size::Int64 = 10000)\nfitmodel(formula::FormulaTerm, data::DataFrame, modelClass::PoissonRegression, prior::Prior_Uniform, h::Float64 = 1.0, sim_size::Int64 = 10000)","category":"page"},{"location":"api/bayesian_regression/#CRRao.fitmodel-16","page":"Bayesian Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::PoissonRegression, prior::Prior_Ridge, h::Float64 = 0.1, sim_size::Int64 = 10000)\n\nFit a Bayesian Poisson Regression model on the input data with a Ridge prior.\n\n\n\n\n\n","category":"function"},{"location":"api/bayesian_regression/#CRRao.fitmodel-17","page":"Bayesian Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::PoissonRegression, prior::Prior_Laplace, h::Float64 = 0.1, sim_size::Int64 = 10000)\n\nFit a Bayesian Poisson Regression model on the input data with a Laplace prior.\n\n\n\n\n\n","category":"function"},{"location":"api/bayesian_regression/#CRRao.fitmodel-18","page":"Bayesian Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LinearRegression, prior::Prior_Cauchy, h::Float64 = 1.0, sim_size::Int64 = 10000)\n\nFit a Bayesian Poisson Regression model on the input data with a Cauchy prior.\n\n\n\n\n\n","category":"function"},{"location":"api/bayesian_regression/#CRRao.fitmodel-19","page":"Bayesian Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::PoissonRegression, prior::Prior_TDist, h::Float64 = 2.0, sim_size::Int64 = 10000)\n\nFit a Bayesian Poisson Regression model on the input data with a t(ν) distributed prior.\n\n\n\n\n\n","category":"function"},{"location":"api/bayesian_regression/#CRRao.fitmodel-20","page":"Bayesian Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::PoissonRegression, prior::Prior_Uniform, h::Float64 = 1.0, sim_size::Int64 = 10000)\n\nFit a Bayesian Poisson Regression model on the input data with a Uniform prior.\n\n\n\n\n\n","category":"function"},{"location":"api/frequentist_regression/#Frequentist-Regression-Models","page":"Frequentist Regression Models","title":"Frequentist Regression Models","text":"","category":"section"},{"location":"api/frequentist_regression/","page":"Frequentist Regression Models","title":"Frequentist Regression Models","text":"FrequentistRegression","category":"page"},{"location":"api/frequentist_regression/#CRRao.FrequentistRegression","page":"Frequentist Regression Models","title":"CRRao.FrequentistRegression","text":"FrequentistRegression{RegressionType}\n\nType to represent frequentist regression models returned by fitmodel functions. This type is used internally by the package to represent all frequentist regression models. RegressionType is a Symbol representing the model class.\n\n\n\n\n\n","category":"type"},{"location":"api/frequentist_regression/#Linear-Regression","page":"Frequentist Regression Models","title":"Linear Regression","text":"","category":"section"},{"location":"api/frequentist_regression/","page":"Frequentist Regression Models","title":"Frequentist Regression Models","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LinearRegression)","category":"page"},{"location":"api/frequentist_regression/#CRRao.fitmodel-Tuple{FormulaTerm, DataFrame, LinearRegression}","page":"Frequentist Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LinearRegression)\n\nFit an OLS Linear Regression model on the input data. Uses the lm method from the GLM package under the hood. Returns an object of type FrequentistRegression{:LinearRegression}.\n\n\n\n\n\n","category":"method"},{"location":"api/frequentist_regression/#Logistic-Regression","page":"Frequentist Regression Models","title":"Logistic Regression","text":"","category":"section"},{"location":"api/frequentist_regression/","page":"Frequentist Regression Models","title":"Frequentist Regression Models","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::Logit)\nfitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::Probit)\nfitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::Cloglog)\nfitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::Cauchit)","category":"page"},{"location":"api/frequentist_regression/#CRRao.fitmodel-Tuple{FormulaTerm, DataFrame, LogisticRegression, Logit}","page":"Frequentist Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::Logit)\n\nFit a Logistic Regression model on the input data using the Logit link. Uses the glm method from the GLM package under the hood. Returns an object of type FrequentistRegression{:LogisticRegression}.\n\n\n\n\n\n","category":"method"},{"location":"api/frequentist_regression/#CRRao.fitmodel-Tuple{FormulaTerm, DataFrame, LogisticRegression, Probit}","page":"Frequentist Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::Probit)\n\nFit a Logistic Regression model on the input data using the Probit link. Uses the glm method from the GLM package under the hood. Returns an object of type FrequentistRegression{:LogisticRegression}.\n\n\n\n\n\n","category":"method"},{"location":"api/frequentist_regression/#CRRao.fitmodel-Tuple{FormulaTerm, DataFrame, LogisticRegression, Cloglog}","page":"Frequentist Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::Cloglog)\n\nFit a Logistic Regression model on the input data using the Cloglog link. Uses the glm method from the GLM package under the hood. Returns an object of type FrequentistRegression{:LogisticRegression}.\n\n\n\n\n\n","category":"method"},{"location":"api/frequentist_regression/#CRRao.fitmodel-Tuple{FormulaTerm, DataFrame, LogisticRegression, Cauchit}","page":"Frequentist Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::Cauchit)\n\nFit a Logistic Regression model on the input data using the Cauchit link. Uses the glm method from the GLM package under the hood. Returns an object of type FrequentistRegression{:LogisticRegression}.\n\n\n\n\n\n","category":"method"},{"location":"api/frequentist_regression/#Negative-Binomial-Regression","page":"Frequentist Regression Models","title":"Negative Binomial Regression","text":"","category":"section"},{"location":"api/frequentist_regression/","page":"Frequentist Regression Models","title":"Frequentist Regression Models","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::NegBinomRegression)","category":"page"},{"location":"api/frequentist_regression/#CRRao.fitmodel-Tuple{FormulaTerm, DataFrame, NegBinomRegression}","page":"Frequentist Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::NegBinomRegression)\n\nFit a Negative Binomial Regression model on the input data (with the default link function being the Log link). Uses the glm method from the GLM package under the hood. Returns an object of type FrequentistRegression{:NegativeBinomialRegression}.\n\n\n\n\n\n","category":"method"},{"location":"api/frequentist_regression/#Poisson-Regression","page":"Frequentist Regression Models","title":"Poisson Regression","text":"","category":"section"},{"location":"api/frequentist_regression/","page":"Frequentist Regression Models","title":"Frequentist Regression Models","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::PoissonRegression)","category":"page"},{"location":"api/frequentist_regression/#CRRao.fitmodel-Tuple{FormulaTerm, DataFrame, PoissonRegression}","page":"Frequentist Regression Models","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::PoissonRegression)\n\nFit a Poisson Regression model on the input data (with the default link function being the Log link). Uses the glm method from the GLM package under the hood. Returns an object of type FrequentistRegression{:PoissonRegression}.\n\n\n\n\n\n","category":"method"},{"location":"api/frequentist_regression/#Extended-functions-from-[StatsAPI.jl](https://github.com/JuliaStats/StatsAPI.jl)","page":"Frequentist Regression Models","title":"Extended functions from StatsAPI.jl","text":"","category":"section"},{"location":"api/frequentist_regression/","page":"Frequentist Regression Models","title":"Frequentist Regression Models","text":"coeftable(container::FrequentistRegression)\nr2(container::FrequentistRegression)\nadjr2(container::FrequentistRegression)\nloglikelihood(container::FrequentistRegression)\naic(container::FrequentistRegression)\nbic(container::FrequentistRegression)\nsigma(container::FrequentistRegression)\npredict(container::FrequentistRegression)\nresiduals(container::FrequentistRegression)\ncooksdistance(container::FrequentistRegression)","category":"page"},{"location":"api/frequentist_regression/#CRRao.coeftable-Tuple{FrequentistRegression}","page":"Frequentist Regression Models","title":"CRRao.coeftable","text":"coeftable(container::FrequentistRegression)\n\nTable of coefficients and other statistics of the model. Extends the coeftable method from StatsAPI.jl.\n\nExample\n\nusing CRRao, RDatasets\n\n# Get the dataset\nmtcars = dataset(\"datasets\", \"mtcars\")\n\n# Train the model\ncontainer = @fitmodel(MPG ~ HP + WT + Gear, mtcars, LinearRegression())\n\n# Get table of coefficients\ncoeftable(container)\n\n\n\n\n\n","category":"method"},{"location":"api/frequentist_regression/#CRRao.r2-Tuple{FrequentistRegression}","page":"Frequentist Regression Models","title":"CRRao.r2","text":"r2(container::FrequentistRegression)\n\nCoeffient of determination. Extends the r2 method from StatsAPI.jl.\n\nExample\n\nusing CRRao, RDatasets\n\n# Get the dataset\nmtcars = dataset(\"datasets\", \"mtcars\")\n\n# Train the model\ncontainer = @fitmodel(MPG ~ HP + WT + Gear, mtcars, LinearRegression())\n\n# Get r2\nr2(container)\n\n\n\n\n\n","category":"method"},{"location":"api/frequentist_regression/#CRRao.adjr2-Tuple{FrequentistRegression}","page":"Frequentist Regression Models","title":"CRRao.adjr2","text":"adjr2(container::FrequentistRegression)\n\nAdjusted coeffient of determination. Extends the adjr2 method from StatsAPI.jl.\n\nExample\n\nusing CRRao, RDatasets\n\n# Get the dataset\nmtcars = dataset(\"datasets\", \"mtcars\")\n\n# Train the model\ncontainer = @fitmodel(MPG ~ HP + WT + Gear, mtcars, LinearRegression())\n\n# Get adjr2\nadjr2(container)\n\n\n\n\n\n","category":"method"},{"location":"api/frequentist_regression/#CRRao.loglikelihood-Tuple{FrequentistRegression}","page":"Frequentist Regression Models","title":"CRRao.loglikelihood","text":"loglikelihood(container::FrequentistRegression)\n\nLog-likelihood of the model. Extends the loglikelihood method from StatsAPI.jl.\n\nExample\n\nusing CRRao, RDatasets\n\n# Get the dataset\nmtcars = dataset(\"datasets\", \"mtcars\")\n\n# Train the model\ncontainer = @fitmodel(MPG ~ HP + WT + Gear, mtcars, LinearRegression())\n\n# Get loglikelihood\nadjr2(container)\n\n\n\n\n\n","category":"method"},{"location":"api/frequentist_regression/#CRRao.aic-Tuple{FrequentistRegression}","page":"Frequentist Regression Models","title":"CRRao.aic","text":"aic(container::FrequentistRegression)\n\nAkaike's Information Criterion. Extends the aic method from StatsAPI.jl.\n\nExample\n\nusing CRRao, RDatasets\n\n# Get the dataset\nmtcars = dataset(\"datasets\", \"mtcars\")\n\n# Train the model\ncontainer = @fitmodel(MPG ~ HP + WT + Gear, mtcars, LinearRegression())\n\n# Get aic\naic(container)\n\n\n\n\n\n","category":"method"},{"location":"api/frequentist_regression/#CRRao.bic-Tuple{FrequentistRegression}","page":"Frequentist Regression Models","title":"CRRao.bic","text":"bic(container::FrequentistRegression)\n\nBayesian Information Criterion. Extends the bic method from StatsAPI.jl.\n\nExample\n\nusing CRRao, RDatasets\n\n# Get the dataset\nmtcars = dataset(\"datasets\", \"mtcars\")\n\n# Train the model\ncontainer = @fitmodel(MPG ~ HP + WT + Gear, mtcars, LinearRegression())\n\n# Get bic\nbic(container)\n\n\n\n\n\n","category":"method"},{"location":"api/frequentist_regression/#CRRao.predict-Tuple{FrequentistRegression}","page":"Frequentist Regression Models","title":"CRRao.predict","text":"predict(container::FrequentistRegression)\n\nPredicted response of the model. Extends the predict method from StatsAPI.jl.\n\nExample\n\nusing CRRao, RDatasets\n\n# Get the dataset\nmtcars = dataset(\"datasets\", \"mtcars\")\n\n# Train the model\ncontainer = @fitmodel(MPG ~ HP + WT + Gear, mtcars, LinearRegression())\n\n# Get predicted response\npredict(container)\n\n\n\n\n\n","category":"method"},{"location":"api/frequentist_regression/#CRRao.residuals-Tuple{FrequentistRegression}","page":"Frequentist Regression Models","title":"CRRao.residuals","text":"residuals(container::FrequentistRegression)\n\nResiduals of the model. Extends the residuals method from StatsAPI.jl.\n\nExample\n\nusing CRRao, RDatasets\n\n# Get the dataset\nmtcars = dataset(\"datasets\", \"mtcars\")\n\n# Train the model\ncontainer = @fitmodel(MPG ~ HP + WT + Gear, mtcars, LinearRegression())\n\n# Get residuals\nresiduals(container)\n\n\n\n\n\n","category":"method"},{"location":"api/frequentist_regression/#CRRao.cooksdistance-Tuple{FrequentistRegression}","page":"Frequentist Regression Models","title":"CRRao.cooksdistance","text":"cooksdistance(container::FrequentistRegression)\n\nCompute Cook's distance for each observation in a linear model. Extends the cooksdistance method from StatsAPI.jl.\n\nExample\n\nusing CRRao, RDatasets\n\n# Get the dataset\nmtcars = dataset(\"datasets\", \"mtcars\")\n\n# Train the model\ncontainer = @fitmodel(MPG ~ HP + WT + Gear, mtcars, LinearRegression())\n\n# Get vector of Cook's distances\ncooksdistance(container)\n\n\n\n\n\n","category":"method"},{"location":"api/interface/#General-Interface","page":"General Interface","title":"General Interface","text":"","category":"section"},{"location":"api/interface/#Understanding-the-interface","page":"General Interface","title":"Understanding the interface","text":"","category":"section"},{"location":"api/interface/","page":"General Interface","title":"General Interface","text":"CRRao exports the @fitmodel macro, which is used to train all types of models supported by the package. As of now, the macro supports the following signatures.","category":"page"},{"location":"api/interface/","page":"General Interface","title":"General Interface","text":"@fitmodel(formula, data, modelClass)\n@fitmodel(formula, data, modelClass, link)\n@fitmodel(formula, data, modelClass, prior)\n@fitmodel(formula, data, modelClass, link, prior)","category":"page"},{"location":"api/interface/","page":"General Interface","title":"General Interface","text":"It should be noted that not all model classes support every type of signature. The parameters passed above mean the following.","category":"page"},{"location":"api/interface/","page":"General Interface","title":"General Interface","text":"The parameter formula must be a formula of type StatsModels.FormulaTerm. Any formula has an LHS and an RHS. The LHS represents the response variable, and the RHS represents the independent variables.\nThe parameter data must be a DataFrame. This variable represents the dataset on which the model must be trained.\nmodelClass represents the type of the statistical model to be used. Currently, CRRao supports four regression models, and the type of modelClass must be one of the following:\nLinearRegression\nLogisticRegression\nNegBinomRegression\nPoissonRegression\nCertain model classes (like Logistic Regression) support link functions; this is represented by the link parameter. Currently four link functions are supported: Logit, Probit, Cloglog and Cauchit. So, the type of link must be one of the following:\nLogit\nProbit\nCloglog\nCauchit\nCRRao also supports Bayesian models, and the priors to be can be specified while calling @fitmodel. Currently CRRao supports five different kinds of priors, and the type of the prior parameter must be one of the following.\nPrior_Ridge\nPrior_Laplace\nPrior_Cauchy\nPrior_TDist\nPrior_Uniform","category":"page"},{"location":"api/interface/","page":"General Interface","title":"General Interface","text":"@fitmodel","category":"page"},{"location":"api/interface/#CRRao.@fitmodel","page":"General Interface","title":"CRRao.@fitmodel","text":"@fitmodel(formula, data, modelClass)\n@fitmodel(formula, data, modelClass, link)\n@fitmodel(formula, data, modelClass, prior)\n@fitmodel(formula, data, modelClass, link, prior)\n\nMacro for calling fitmodel functions to run different models.\n\nArguments\n\nformula: A formula of type StatsModels.FormulaTerm.\ndata: A DataFrame object.\nmodelClass: An object of a type representing a model class.\nlink: The link function. Must be a subtype of CRRaoLink.\nprior: An object of a type representing a prior.\n\nExample\n\nusing CRRao, RDatasets\nturnout = dataset(\"Zelig\", \"turnout\")\nmodel = @fitmodel((Vote ~ Age + Race + Income + Educate), turnout, LogisticRegression(), Logit(), Prior_Ridge())\n\n\n\n\n\n","category":"macro"},{"location":"api/interface/#Model-Classes","page":"General Interface","title":"Model Classes","text":"","category":"section"},{"location":"api/interface/","page":"General Interface","title":"General Interface","text":"LinearRegression\nLogisticRegression\nNegBinomRegression\nPoissonRegression","category":"page"},{"location":"api/interface/#CRRao.LinearRegression","page":"General Interface","title":"CRRao.LinearRegression","text":"LinearRegression\n\nType representing the Linear Regression model class.\n\n\n\n\n\n","category":"type"},{"location":"api/interface/#CRRao.LogisticRegression","page":"General Interface","title":"CRRao.LogisticRegression","text":"LogisticRegression\n\nType representing the Logistic Regression model class.\n\n\n\n\n\n","category":"type"},{"location":"api/interface/#CRRao.NegBinomRegression","page":"General Interface","title":"CRRao.NegBinomRegression","text":"NegBinomRegression\n\nType representing the Negative Binomial Regression model class.\n\n\n\n\n\n","category":"type"},{"location":"api/interface/#CRRao.PoissonRegression","page":"General Interface","title":"CRRao.PoissonRegression","text":"PoissonRegression\n\nType representing the Poisson Regression model class.\n\n\n\n\n\n","category":"type"},{"location":"api/interface/#Link-functions.","page":"General Interface","title":"Link functions.","text":"","category":"section"},{"location":"api/interface/","page":"General Interface","title":"General Interface","text":"CRRaoLink\nLogit\nProbit\nCloglog\nCauchit","category":"page"},{"location":"api/interface/#CRRao.CRRaoLink","page":"General Interface","title":"CRRao.CRRaoLink","text":"CRRaoLink\n\nAbstract type representing link functions which are used to dispatch to appropriate calls.\n\n\n\n\n\n","category":"type"},{"location":"api/interface/#CRRao.Logit","page":"General Interface","title":"CRRao.Logit","text":"Logit <: CRRaoLink\n\nA type representing the Logit link function, which is defined by the formula\n\nzmapsto dfrac11 + exp(-z)\n\n\n\n\n\n","category":"type"},{"location":"api/interface/#CRRao.Probit","page":"General Interface","title":"CRRao.Probit","text":"Probit <: CRRaoLink\n\nA type representing the Probit link function, which is defined by the formula\n\nzmapsto mathbbPZle z\n\nwhere Zsim textNormal(0 1).\n\n\n\n\n\n","category":"type"},{"location":"api/interface/#CRRao.Cloglog","page":"General Interface","title":"CRRao.Cloglog","text":"Cloglog <: CRRaoLink\n\nA type representing the Cloglog link function, which is defined by the formula \n\nzmapsto 1 - exp(-exp(z))\n\n\n\n\n\n","category":"type"},{"location":"api/interface/#CRRao.Cauchit","page":"General Interface","title":"CRRao.Cauchit","text":"Cauchit <: CRRaoLink\n\nA type representing the Cauchit link function, which is defined by the formula\n\nzmapsto dfrac12 + dfractextatan(z)pi\n\n\n\n\n\n","category":"type"},{"location":"api/interface/#Setting-Random-Number-Generators","page":"General Interface","title":"Setting Random Number Generators","text":"","category":"section"},{"location":"api/interface/","page":"General Interface","title":"General Interface","text":"CRRao.set_rng","category":"page"},{"location":"api/interface/#CRRao.set_rng","page":"General Interface","title":"CRRao.set_rng","text":"set_rng(rng)\n\nSet the random number generator. This is useful if you want to work with reproducible results. rng must be a random number generator.\n\nExample\n\nusing StableRNGs\nCRRao.set_rng(StableRNG(1234))\n\n\n\n\n\n","category":"function"},{"location":"man/guide/#Package-Guide","page":"Guide","title":"Package Guide","text":"","category":"section"},{"location":"man/guide/#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"To install the package, type ] in the Julia REPL to enter the Pkg mode and run","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"pkg> add https://github.com/xKDR/CRRao.jl","category":"page"},{"location":"man/guide/#Tutorial:-Frequentist-Linear-Regression","page":"Guide","title":"Tutorial: Frequentist Linear Regression","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"The goal of the CRRao package is to try to unify calling variety of statistical models under the same API. Note that this is different from what something like StatsAPI.jl is doing; instead of introducing namespaces for development of packages, CRRao tries to call those packages with a uniform API. A very similar package comes from the R world: the Zelig Project.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"To see how this API works, we will go over an example in which we'll train a linear regression model with the usual ordinary least squares method (which falls under the category of the frequentist viewpoint of statistics). For our example, we will be working with the mtcars dataset.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"We first import the required packages.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"using CRRao, RDatasets, StatsPlots, Plots","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Then we import the dataset.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"mtcars = dataset(\"datasets\", \"mtcars\")","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"This dataset has 11 columns (barring the index). We want to train a linear regression model to predict MPG of a car from the information contained in the attributes HP, WT and Gear. We can represent this as a formula term of type StatsModels.formula. The formula term will look like","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"MPG ~ HP + WT + Gear","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"More information about such terms can be found in the corresponding docs. ","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Next, we train a linear regression model.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"model = @fitmodel(MPG ~ HP + WT + Gear, mtcars, LinearRegression())","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"As we can see from the output, a table of coefficients has been printed for us. We can now infer other details of the model from the various getter functions that apply to frequentist models. So one can do the following.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"coeftable(model)\nsigma(model)","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"We can also get the predicted response of the model, along with other measures like the vector of Cook's distances using the predict and cooksdistance functions exported by CRRao. Here's a plot of the vector of Cook's distances.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"plot(cooksdistance(model))","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"To understand more about these functions and in general how frequentist models work in CRRao along with a complete set of getter functions that can be used, please visit the section of the API reference on Frequentist Regression Models.","category":"page"},{"location":"man/guide/#Tutorial:-Bayesian-Logistic-Regression","page":"Guide","title":"Tutorial: Bayesian Logistic Regression","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Next, let's see an example of doing bayesian statistical inference with CRRao. In this example, we will perform bayesian logistic regression on the turnout dataset from R's Zelig. Further, we will use the Logit link function with a Ridge prior (Prior_Ridge).","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"With this example, we'll also showcase how to use random number generators to get reproducible results. For this, we will use the StableRNGs package (although any random number generator can be used). So, first we import the required modules.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"using Logging\nLogging.disable_logging(Logging.Warn)","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"using CRRao, RDatasets, StableRNGs","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"CRRao.setprogress!(false)","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Then, we use a StableRNG with random seed 123 as our random number generator.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"CRRao.set_rng(StableRNG(123))","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"(Check the documentation of the CRRao.set_rng method for more details). Next, let us load our dataset.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"turnout = dataset(\"Zelig\", \"turnout\")","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"And finally, we do the inference using our proposed model.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"model = @fitmodel(Vote ~ Age + Race + Income + Educate, turnout, LogisticRegression(), Logit(), Prior_Ridge())","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = CRRao","category":"page"},{"location":"","page":"Home","title":"Home","text":"Documentation for CRRao.","category":"page"},{"location":"#CRRao","page":"Home","title":"CRRao","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CRRao is a package that implements statistical models. The implementation  of statistical models becomes straightforward for most Julia users  with the help of this package. This is going to be a wrapper package; leveraging the strength of wonderful Julia packages that already exist,  such as StatsBase.jl, StatsModels.jl, Distributions.jl, GLM.jl, Turing.jl, Dataframes.jl, LinearAlgebra.jl etc.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CRRao is a consistent framework through which callers interact with  a large suite of models. For the end-user, it reduces the cost and complexity  of estimating/training statistical models. It offers convenient guidelines through  which development of additional statistical models can take place in the future.","category":"page"},{"location":"","page":"Home","title":"Home","text":"We follow a framework which makes contribution to this package easy.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nYou can read more about Prof C.R. Rao here.","category":"page"},{"location":"#Manual","page":"Home","title":"Manual","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"man/guide.md\",\n    \"man/examples.md\",\n]","category":"page"},{"location":"#API-Reference","page":"Home","title":"API Reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"api/interface.md\",\n    \"api/frequentist_regression.md\",\n    \"api/bayesian_regression.md\"\n]","category":"page"}]
}
