var documenterSearchIndex = {"docs":
[{"location":"examples/#Examples:-Setting-up-the-code","page":"Examples","title":"Examples: Setting up the code","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using RDatasets, NLSolversBase, CRRao, Logging, StableRNGs;\n\nLogging.disable_logging(Logging.Warn); CRRao.setprogress!(false);\n\nCRRao.set_rng(StableRNG(123))\n","category":"page"},{"location":"examples/#Example-1:-Linear-Regression","page":"Examples","title":"Example 1: Linear Regression","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"df = dataset(\"datasets\", \"mtcars\")\n\nm1_1 = @fitmodel((MPG ~ HP + WT+Gear),df,LinearRegression());\n\nm1_1.fit\n\nm1_1.sigma\n\nm1_1.LogLike\n\nm1_1.AIC\n\nm1_1.BIC\n\nm1_1.R_sqr\n\nm1_1.Adjusted_R_sqr\n\nm1_1.fittedResponse\n\nm1_1.residuals\n\nm1_1.Cooks_distance\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Linear Regression - Ridge Prior","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"m1_2 = @fitmodel((MPG ~ HP + WT+Gear),df,LinearRegression(),Prior_Ridge());\n\nm1_2.summaries\n\nm1_2.quantiles\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Linear Regression - Laplace Prior","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"m1_3 = @fitmodel((MPG ~ HP + WT+Gear),df,LinearRegression(),Prior_Laplace());\n\nm1_3.summaries\n\nm1_3.quantiles\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Linear Regression - Cauchy Prior","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"m1_4 = @fitmodel((MPG ~ HP + WT+Gear),df,LinearRegression(),Prior_Cauchy(),20000);\n\nm1_4.summaries\n\nm1_4.quantiles\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Linear Regression - T-Distributed Prior","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"m1_5 = @fitmodel((MPG ~ HP + WT+Gear),df,LinearRegression(),Prior_TDist());\n\nm1_5.summaries\n\nm1_5.quantiles\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Linear Regression - Uniform Prior","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"m1_6 = @fitmodel((MPG ~ HP + WT+Gear),df,LinearRegression(),Prior_TDist());\n\nm1_6.summaries\n\nm1_6.quantiles\n","category":"page"},{"location":"examples/#Example-2:-Logistic-Regression","page":"Examples","title":"Example 2: Logistic Regression","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"turnout = dataset(\"Zelig\", \"turnout\")\n\nm2_1 = @fitmodel((Vote ~ Age + Race +Income + Educate)\n                       ,turnout,LogisticRegression(),Logit());\n\nm2_1.fit\n\nm2_1.modelClass\n\nm2_1.LogLike\n\nm2_1.AIC\n\nm2_1.BIC\n\nm2_2 = @fitmodel((Vote ~ Age + Race +Income + Educate)\n                       ,turnout,LogisticRegression(),Probit());\n\nm2_2.fit\n\nm2_2.BIC\n\n\nm2_3 = @fitmodel((Vote ~ Age + Race +Income + Educate)\n                       ,turnout,LogisticRegression(),Cloglog());\n\nm2_3.fit\n\nm2_3.BIC\n\nm2_4 = @fitmodel((Vote ~ Age + Race +Income + Educate)\n                       ,turnout,LogisticRegression(),Cauchit());\n\nm2_4.fit\n\nm2_4.BIC\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Logistic Regression - with Ridge Prior","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"m2_5 = @fitmodel((Vote ~ Age + Race +Income + Educate),turnout\n                       ,LogisticRegression(),Logit(),Prior_Ridge());\n\nm2_5.summaries\n\nm2_5.quantiles\n\nm2_6 = @fitmodel((Vote ~ Age + Race +Income + Educate),turnout\n                       ,LogisticRegression(),Probit(),Prior_Ridge(),1.0);\n\nm2_6.summaries\n\nm2_6.quantiles\n\nm2_7 = @fitmodel((Vote ~ Age + Race +Income + Educate),turnout\n                       ,LogisticRegression(),Cloglog(),Prior_Ridge(),1.0);\n\nm2_7.summaries\n\nm2_7.quantiles\n\nm2_8 = @fitmodel((Vote ~ Age + Race +Income + Educate),turnout\n                       ,LogisticRegression(),Cauchit(),Prior_Ridge(),1.0);\n\nm2_8.summaries\n\nm2_8.quantiles\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Logistic Regression - with Laplace Prior","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"m2_9 = @fitmodel((Vote ~ Age + Race +Income + Educate),turnout\n                       ,LogisticRegression(),Logit(),Prior_Laplace());\n\nm2_9.summaries\n\nm2_9.quantiles\n\nm2_10 = @fitmodel((Vote ~ Age + Race +Income + Educate),turnout\n                       ,LogisticRegression(),Probit(),Prior_Laplace());\n\nm2_10.summaries\n\nm2_10.quantiles\n\nm2_11 = @fitmodel((Vote ~ Age + Race +Income + Educate),turnout\n                       ,LogisticRegression(),Cloglog(),Prior_Laplace(),1.0);\n\nm2_11.summaries\n\nm2_11.quantiles\n\nm2_12 = @fitmodel((Vote ~ Age + Race +Income + Educate),turnout\n                       ,LogisticRegression(),Cauchit(),Prior_Laplace(),1.0);\n\nm2_12.summaries\n\nm2_12.quantiles\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Logistic Regression - with Cauchy Prior","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"m2_13 = @fitmodel((Vote ~ Age + Race +Income + Educate),turnout\n                       ,LogisticRegression(),Logit(),Prior_Cauchy(),1.0);\n\nm2_13.summaries\n\nm2_13.quantiles\n\nm2_14 = @fitmodel((Vote ~ Age + Race +Income + Educate),turnout\n                       ,LogisticRegression(),Probit(),Prior_Cauchy(),2.0,30000);\n\nm2_14.summaries\n\nm2_14.quantiles\n           \nm2_15 = @fitmodel((Vote ~ Age + Race +Income + Educate),turnout\n                       ,LogisticRegression(),Cloglog(),Prior_Cauchy(),1.0);\n\nm2_15.summaries\n\nm2_15.quantiles\n              \nm2_16 = @fitmodel((Vote ~ Age + Race +Income + Educate),turnout\n                       ,LogisticRegression(),Cauchit(),Prior_Cauchy(),1.0);\n\nm2_16.summaries\n\nm2_16.quantiles\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Logistic Regression - with T-Dist Prior","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"m2_17 = @fitmodel((Vote ~ Age + Race +Income + Educate),turnout\n                       ,LogisticRegression(),Logit(),Prior_TDist(),1.0);\n\nm2_17.summaries\n\nm2_17.quantiles\n\nm2_18 = @fitmodel((Vote ~ Age + Race +Income + Educate),turnout\n                       ,LogisticRegression(),Probit(),Prior_TDist(),1.0);\n\nm2_18.summaries\n\nm2_18.quantiles\n\nm2_19 = @fitmodel((Vote ~ Age + Race +Income + Educate),turnout\n                       ,LogisticRegression(),Cloglog(),Prior_TDist(),1.0);\n\nm2_19.summaries\n\nm2_19.quantiles\n\nm2_20 = @fitmodel((Vote ~ Age + Race +Income + Educate),turnout\n                       ,LogisticRegression(),Cauchit(),Prior_TDist(),1.0);\n\nm2_20.summaries\n\nm2_20.quantiles\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Logistic Regression - with Uniform Prior","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"m2_21 = @fitmodel((Vote ~ Age + Race +Income + Educate),turnout\n                       ,LogisticRegression(),Logit(),Prior_Uniform(),1.0);\n\nm2_21.summaries\n\nm2_21.quantiles\n\nm2_22 = @fitmodel((Vote ~ Age + Race +Income + Educate),turnout\n                       ,LogisticRegression(),Probit(),Prior_Uniform(),1.0);\n\nm2_22.summaries\n\nm2_22.quantiles\n\nm2_23 = @fitmodel((Vote ~ Age + Race +Income + Educate),turnout\n                       ,LogisticRegression(),Cloglog(),Prior_Uniform(),1.0);\n\nm2_23.summaries\n\nm2_23.quantiles\n                \nm2_24 = @fitmodel((Vote ~ Age + Race +Income + Educate),turnout\n                       ,LogisticRegression(),Cauchit(),Prior_Uniform(),1.0);\n\nm2_24.summaries\n\nm2_24.quantiles\n","category":"page"},{"location":"examples/#Example-3:-Poisson-Regression","page":"Examples","title":"Example 3: Poisson Regression","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Poisson Regression - Likelihood analysis","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"sanction = dataset(\"Zelig\", \"sanction\")\n\nm3_1 = @fitmodel((Num ~ Target + Coop + NCost), sanction,PoissonRegression());\n\nm3_1.fit\n\nm3_1.LogLike\n\nm3_1.AIC\n\nm3_1.BIC\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Poisson Regression with Ridge Prior","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"m3_2 = @fitmodel((Num ~ Target + Coop + NCost), sanction,PoissonRegression(),Prior_Ridge());\n\nm3_2.summaries\n\nm3_2.quantiles\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Poisson Regression with Laplace Prior","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"m3_3 = @fitmodel((Num ~ Target + Coop + NCost), sanction,PoissonRegression(),Prior_Laplace());\n\nm3_3.summaries\n\nm3_3.quantiles\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Poisson Regression with Cauchy Prior","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"m3_4 = @fitmodel((Num ~ Target + Coop + NCost), sanction,PoissonRegression(),Prior_Cauchy());\n\nm3_4.summaries\n\nm3_4.quantiles\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Poisson Regression with TDist Prior","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"m3_5 = @fitmodel((Num ~ Target + Coop + NCost), sanction,PoissonRegression(),Prior_TDist());\n\nm3_5.summaries\n\nm3_5.quantiles\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Poisson Regression with Uniform Prior","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"m3_6 = @fitmodel((Num ~ Target + Coop + NCost), sanction,PoissonRegression(),Prior_Uniform());\n\nm3_6.summaries\n\nm3_6.quantiles\n       ","category":"page"},{"location":"examples/#Example-4:-Negative-Binomial-Regression","page":"Examples","title":"Example 4: Negative Binomial Regression","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"sanction = dataset(\"Zelig\", \"sanction\")\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Negative Binomial Regression - Likelihood method ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"m4_1 = @fitmodel((Num ~ Target + Coop + NCost), sanction,NegBinomRegression());\n\nm4_1.fit\n\nm4_1.AIC\n\nm4_1.BIC\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"NegativeBinomial Regression with Ridge Prior","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"m4_2 = @fitmodel((Num ~ Target + Coop + NCost), sanction,NegBinomRegression(),Prior_Ridge());\n\nm4_2.summaries\n\nm4_2.quantiles\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"NegativeBinomial Regression with Laplace Prior","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"m4_3 = @fitmodel((Num ~ Target + Coop + NCost), sanction,NegBinomRegression(),Prior_Laplace());\n\nm4_3.summaries\n\nm4_3.quantiles\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Negative Binomial Regression with Cauchy Prior","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"m4_4 = @fitmodel((Num ~ Target + Coop + NCost), sanction,NegBinomRegression(),Prior_Cauchy())\n\nm4_4.summaries\n\nm4_4.quantiles\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Negative Binomial Regression with TDist Prior","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"m4_5 = @fitmodel((Num ~ Target + Coop + NCost), sanction,NegBinomRegression(),Prior_TDist());\n\nm4_5.summaries\n\nm4_5.quantiles\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Negative Binomial Regression with Uniform Prior","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"m4_6 = @fitmodel((Num ~ Target + Coop + NCost), sanction,NegBinomRegression(),Prior_Uniform(),1.0);\n\nm4_6.summaries\n\nm4_6.quantiles\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = CRRao","category":"page"},{"location":"#CRRao","page":"Home","title":"CRRao","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CRRao.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CRRao]","category":"page"},{"location":"#CRRao.CRRao","page":"Home","title":"CRRao.CRRao","text":"CRRao is a Julia package that implements the Statistical models. The implementation  of Statistical models become straightforward for most Julia users  with the help of this package. This is going to be wrapper package; leveraging the strength of wonderful Julia packages that already exists,  such as StatsBase, StatsModels, Distributions,GLM, Turing, DataFrames, LinearAlgebra, etc.\n\nCRRao is a consistent framework through which callers interact with  a large suite of models. For the end-user, it reduces the cost and complexity  of estimating/training statistical models. It offers convenient guidelines through  which development of additional statistical models can take place  in the future.\n\nWe follow framework which makes contribution to this package easy.\n\nNote: You can read more about Prof C.R. Rao here\n\n\n\n\n\n","category":"module"},{"location":"#CRRao.BayesianRegression","page":"Home","title":"CRRao.BayesianRegression","text":"Type to represent bayesian regression models returned by fitmodel functions. This type is used internally by the package to represent all bayesian regression models.\n\n\n\n\n\n","category":"type"},{"location":"#CRRao.BayesianRegression-Tuple{Symbol, Any, Any}","page":"Home","title":"CRRao.BayesianRegression","text":"BayesianRegression(::Symbol, chain)\n\nConstructor for BayesianRegression. model can be any regression model. Used by fitmodel functions to return a frequentist regression model containers.\n\n\n\n\n\n","category":"method"},{"location":"#CRRao.CRRaoLink","page":"Home","title":"CRRao.CRRaoLink","text":"CRRaoLink\n\nAbstract type representing link functions which are used to dispatch to appropriate calls.\n\n\n\n\n\n","category":"type"},{"location":"#CRRao.Cauchit","page":"Home","title":"CRRao.Cauchit","text":"Cauchit <: CRRaoLink\n\nA type representing the Cauchit link function.\n\n\n\n\n\n","category":"type"},{"location":"#CRRao.Cloglog","page":"Home","title":"CRRao.Cloglog","text":"Cloglog <: CRRaoLink\n\nA type representing the Cloglog link function.\n\n\n\n\n\n","category":"type"},{"location":"#CRRao.FrequentistRegression","page":"Home","title":"CRRao.FrequentistRegression","text":"FrequentistRegression(::Symbol, model, formula, link = GLM.IdentityLink)\n\nConstructor for FrequentistRegression. model can be any regression model. Used by fitmodel functions to return a frequentist regression model containers.\n\n\n\n\n\n","category":"type"},{"location":"#CRRao.FrequentistRegression-2","page":"Home","title":"CRRao.FrequentistRegression","text":"Type to represent frequentist regression models returned by fitmodel functions. This type is used internally by the package to represent all frequentist regression models.\n\n\n\n\n\n","category":"type"},{"location":"#CRRao.Logit","page":"Home","title":"CRRao.Logit","text":"Logit <: CRRaoLink\n\nA type representing the Logit link function.\n\n\n\n\n\n","category":"type"},{"location":"#CRRao.Probit","page":"Home","title":"CRRao.Probit","text":"Probit <: CRRaoLink\n\nA type representing the Probit link function.\n\n\n\n\n\n","category":"type"},{"location":"#CRRao.fitmodel","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::CRRaoLink, prior::Prior_Laplace, h::Float64 = 0.1, level::Float64 = 0.95, sim_size::Int64 = 10000)\n\nFit a Bayesian Logistic Regression model on the input data with a Laplace prior. \n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset.\nmodelClass: Object representing the type of regression, which is Logistic Regression in our case.\nprior: A type representing the prior. In this case, it is the Laplace prior.\nLink: A type representing the link function to be used. Possible values are Logit(), Probit(), Cloglog() and Cauchit().\nh: A parameter used in setting the priors.\nsim_size: The number of samples to be drawn during inference.\n\nExample\n\njulia> using CRRao, RDatasets, StableRNGs\n\njulia> CRRao.set_rng(StableRNG(123))\nStableRNGs.LehmerRNG(state=0x000000000000000000000000000000f7)\n\njulia> turnout = dataset(\"Zelig\", \"turnout\");\n\njulia> container_logit = @fitmodel(Vote ~ Age + Race + Income + Educate, turnout, LogisticRegression(), Logit(), Prior_Laplace());\n\njulia> container_probit = @fitmodel(Vote ~ Age + Race + Income + Educate, turnout, LogisticRegression(), Probit(), Prior_Laplace());\n\njulia> container_cloglog = @fitmodel(Vote ~ Age + Race + Income + Educate, turnout, LogisticRegression(), Cloglog(), Prior_Laplace());\n\njulia> container_cauchit = @fitmodel(Vote ~ Age + Race + Income + Educate, turnout, LogisticRegression(), Cauchit(), Prior_Laplace());\n\n\n\n\n\n","category":"function"},{"location":"#CRRao.fitmodel-2","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LinearRegression, prior::Prior_Uniform, h::Float64 = 0.01, sim_size::Int64 = 10000)\n\nFit a Bayesian Linear Regression model on the input data with a Uniform prior.\n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset.\nmodelClass: Object representing the type of regression, which is Linear Regression in our case.\nprior: A type representing the prior. In this case, it is the Uniform prior.\nh: A parameter used in setting the priors.\nsim_size: The number of samples to be drawn during inference.\n\nExample\n\njulia> using CRRao, RDatasets, StableRNGs, StatsPlots\n\njulia> CRRao.set_rng(StableRNG(123))\nStableRNGs.LehmerRNG(state=0x000000000000000000000000000000f7)\n\njulia> df = dataset(\"datasets\", \"mtcars\");\n\njulia> container = @fitmodel(MPG ~ HP + WT + Gear, df, LinearRegression(), Prior_Uniform());\n\njulia> plot(container.chain)\n\n\n\n\n\n","category":"function"},{"location":"#CRRao.fitmodel-3","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::CRRaoLink, prior::Prior_Cauchy, h::Float64 = 0.1, level::Float64 = 0.95, sim_size::Int64 = 10000)\n\nFit a Bayesian Logistic Regression model on the input data with a Cauchy prior. \n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset.\nmodelClass: Object representing the type of regression, which is Logistic Regression in our case.\nprior: A type representing the prior. In this case, it is the Cauchy prior.\nLink: A type representing the link function to be used. Possible values are Logit(), Probit(), Cloglog() and Cauchit().\nh: A parameter used in setting the priors.\nsim_size: The number of samples to be drawn during inference.\n\nExample\n\njulia> using CRRao, RDatasets, StableRNGs\n\njulia> CRRao.set_rng(StableRNG(123))\nStableRNGs.LehmerRNG(state=0x000000000000000000000000000000f7)\n\njulia> turnout = dataset(\"Zelig\", \"turnout\");\n\njulia> container_logit = @fitmodel(Vote ~ Age + Race + Income + Educate, turnout, LogisticRegression(), Logit(), Prior_Cauchy());\n\njulia> container_probit = @fitmodel(Vote ~ Age + Race + Income + Educate, turnout, LogisticRegression(), Probit(), Prior_Cauchy());\n\njulia> container_cloglog = @fitmodel(Vote ~ Age + Race + Income + Educate, turnout, LogisticRegression(), Cloglog(), Prior_Cauchy());\n\njulia> container_cauchit = @fitmodel(Vote ~ Age + Race + Income + Educate, turnout, LogisticRegression(), Cauchit(), Prior_Cauchy());\n\n\n\n\n\n","category":"function"},{"location":"#CRRao.fitmodel-4","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::NegBinomRegression, prior::Prior_Cauchy, h::Float64 = 1.0, sim_size::Int64 = 10000)\n\nFit a Bayesian Negative Binomial Regression model on the input data with a Cauchy prior.\n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset.\nmodelClass: Object representing the type of regression, which is Negative Binomial Regression in our case.\nprior: A type representing the prior. In this case, it is the Cauchy prior.\nsim_size: The number of samples to be drawn during inference.\n\nExample\n\njulia> using CRRao, RDatasets, StableRNGs\n\njulia> CRRao.set_rng(StableRNG(123))\nStableRNGs.LehmerRNG(state=0x000000000000000000000000000000f7)\n\njulia> sanction = dataset(\"Zelig\", \"sanction\");\n\njulia> container = @fitmodel(Num ~ Target + Coop + NCost, sanction, NegBinomRegression(), Prior_Cauchy());\n\n\n\n\n\n","category":"function"},{"location":"#CRRao.fitmodel-5","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LinearRegression, prior::Prior_Laplace, h::Float64 = 0.01, sim_size::Int64 = 10000)\n\nFit a Bayesian Linear Regression model on the input data with a Laplace prior.\n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset.\nmodelClass: Object representing the type of regression, which is Linear Regression in our case.\nprior: A type representing the prior. In this case, it is the Laplace prior.\nh: A parameter used in setting the priors.\nsim_size: The number of samples to be drawn during inference.\n\nExample\n\njulia> using CRRao, RDatasets, StableRNGs\n\njulia> CRRao.set_rng(StableRNG(123))\nStableRNGs.LehmerRNG(state=0x000000000000000000000000000000f7)\n\njulia> df = dataset(\"datasets\", \"mtcars\");\n\njulia> container = @fitmodel(MPG ~ HP + WT + Gear, df, LinearRegression(), Prior_Laplace());\n\n\n\n\n\n","category":"function"},{"location":"#CRRao.fitmodel-6","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LinearRegression, prior::Prior_TDist, h::Float64 = 2.0, sim_size::Int64 = 10000)\n\nFit a Bayesian Linear Regression model on the input data with a t(ν) distributed prior.\n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset.\nmodelClass: Object representing the type of regression, which is Linear Regression in our case.\nprior: A type representing the prior. In this case, it is the TDist prior.\nh: A parameter used in setting the priors.\nsim_size: The number of samples to be drawn during inference.\n\nExample\n\njulia> using CRRao, RDatasets, StableRNGs, StatsPlots\n\njulia> CRRao.set_rng(StableRNG(123))\nStableRNGs.LehmerRNG(state=0x000000000000000000000000000000f7)\n\njulia> df = dataset(\"datasets\", \"mtcars\");\n\njulia> container = @fitmodel(MPG ~ HP + WT + Gear, df, LinearRegression(), Prior_TDist());\n\njulia> plot(container.chain)\n\n\n\n\n\n","category":"function"},{"location":"#CRRao.fitmodel-7","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::PoissonRegression, prior::Prior_Uniform, h::Float64 = 1.0, sim_size::Int64 = 10000)\n\nFit a Bayesian Poisson Regression model on the input data with a Uniform prior.\n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset.\nmodelClass: Object representing the type of regression, which is Poisson Regression in our case.\nprior: A type representing the prior. In this case, it is the Uniform prior.\nh: A parameter used in setting the priors.\nsim_size: The number of samples to be drawn during inference.\n\nExample\n\njulia> using CRRao, RDatasets, StableRNGs\n\njulia> CRRao.set_rng(StableRNG(123))\nStableRNGs.LehmerRNG(state=0x000000000000000000000000000000f7)\n\njulia> sanction = dataset(\"Zelig\", \"sanction\");\n\njulia> container = @fitmodel(Num ~ Target + Coop + NCost, sanction, PoissonRegression(), Prior_Uniform());\n\n\n\n\n\n","category":"function"},{"location":"#CRRao.fitmodel-8","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::NegBinomRegression, prior::Prior_Ridge, h::Float64 = 0.1, sim_size::Int64 = 10000)\n\nFit a Bayesian Negative Binomial Regression model on the input data with a Ridge prior.\n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset.\nmodelClass: Object representing the type of regression, which is Negative Binomial Regression in our case.\nprior: A type representing the prior. In this case, it is the Ridge prior.\nh: A parameter used in setting the priors.\nsim_size: The number of samples to be drawn during inference.\n\nExample\n\njulia> using CRRao, RDatasets, StableRNGs\n\njulia> CRRao.set_rng(StableRNG(123))\nStableRNGs.LehmerRNG(state=0x000000000000000000000000000000f7)\n\njulia> sanction = dataset(\"Zelig\", \"sanction\");\n\njulia> container = @fitmodel(Num ~ Target + Coop + NCost, sanction, NegBinomRegression(), Prior_Ridge());\n\n\n\n\n\n","category":"function"},{"location":"#CRRao.fitmodel-9","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::NegBinomRegression, prior::Prior_Laplace, h::Float64 = 0.01, sim_size::Int64 = 10000)\n\nFit a Bayesian Negative Binomial Regression model on the input data with a Laplace prior.\n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset.\nmodelClass: Object representing the type of regression, which is Negative Binomial Regression in our case.\nprior: A type representing the prior. In this case, it is the Laplace prior.\nh: A parameter used in setting the priors.\nsim_size: The number of samples to be drawn during inference.\n\nExample\n\njulia> using CRRao, RDatasets, StableRNGs\n\njulia> CRRao.set_rng(StableRNG(123))\nStableRNGs.LehmerRNG(state=0x000000000000000000000000000000f7)\n\njulia> sanction = dataset(\"Zelig\", \"sanction\");\n\njulia> container = @fitmodel(Num ~ Target + Coop + NCost, sanction, NegBinomRegression(), Prior_Laplace());\n\n\n\n\n\n","category":"function"},{"location":"#CRRao.fitmodel-10","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LinearRegression, prior::Prior_Cauchy, sim_size::Int64 = 10000)\n\nFit a Bayesian Linear Regression model on the input data with a Cauchy prior.\n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset.\nmodelClass: Object representing the type of regression, which is Linear Regression in our case.\nprior: A type representing the prior. In this case, it is the Cauchy prior.\nsim_size: The number of samples to be drawn during inference.\n\nExample\n\njulia> using CRRao, RDatasets, StableRNGs\n\njulia> CRRao.set_rng(StableRNG(123))\nStableRNGs.LehmerRNG(state=0x000000000000000000000000000000f7)\n\njulia> df = dataset(\"datasets\", \"mtcars\");\n\njulia> container = @fitmodel(MPG ~ HP + WT + Gear, df, LinearRegression(), Prior_Cauchy(), 20000);\n\n\n\n\n\n","category":"function"},{"location":"#CRRao.fitmodel-11","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::CRRaoLink, prior::Prior_Ridge, h::Float64 = 0.1, level::Float64 = 0.95, sim_size::Int64 = 10000)\n\nFit a Bayesian Logistic Regression model on the input data with a Ridge prior. \n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset.\nmodelClass: Object representing the type of regression, which is Logistic Regression in our case.\nprior: A type representing the prior. In this case, it is the Ridge prior.\nLink: A type representing the link function to be used. Possible values are Logit(), Probit(), Cloglog() and Cauchit().\nh: A parameter used in setting the priors.\nsim_size: The number of samples to be drawn during inference.\n\nExample\n\njulia> using CRRao, RDatasets, StableRNGs\n\njulia> CRRao.set_rng(StableRNG(123))\nStableRNGs.LehmerRNG(state=0x000000000000000000000000000000f7)\n\njulia> turnout = dataset(\"Zelig\", \"turnout\");\n\njulia> container_logit = @fitmodel(Vote ~ Age + Race + Income + Educate, turnout, LogisticRegression(), Logit(), Prior_Ridge());\n\njulia> container_probit = @fitmodel(Vote ~ Age + Race + Income + Educate, turnout, LogisticRegression(), Probit(), Prior_Ridge());\n\njulia> container_cloglog = @fitmodel(Vote ~ Age + Race + Income + Educate, turnout, LogisticRegression(), Cloglog(), Prior_Ridge());\n\njulia> container_cauchit = @fitmodel(Vote ~ Age + Race + Income + Educate, turnout, LogisticRegression(), Cauchit(), Prior_Ridge());\n\n\n\n\n\n","category":"function"},{"location":"#CRRao.fitmodel-12","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::NegBinomRegression, prior::Prior_TDist, h::Float64 = 1.0, sim_size::Int64 = 10000)\n\nFit a Bayesian Negative Binomial Regression model on the input data with a t(ν) distributed prior.\n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset.\nmodelClass: Object representing the type of regression, which is Negative Binomial Regression in our case.\nprior: A type representing the prior. In this case, it is the TDist prior.\nh: A parameter used in setting the priors.\nsim_size: The number of samples to be drawn during inference.\n\nExample\n\njulia> using CRRao, RDatasets, StableRNGs\n\njulia> CRRao.set_rng(StableRNG(123))\nStableRNGs.LehmerRNG(state=0x000000000000000000000000000000f7)\n\njulia> sanction = dataset(\"Zelig\", \"sanction\");\n\njulia> container = @fitmodel(Num ~ Target + Coop + NCost, sanction, NegBinomRegression(), Prior_TDist());\n\n\n\n\n\n","category":"function"},{"location":"#CRRao.fitmodel-13","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::NegBinomRegression, prior::Prior_Uniform, h::Float64 = 0.1, sim_size::Int64 = 10000)\n\nFit a Bayesian Negative Binomial Regression model on the input data with a Uniform prior. Ibrahim and Laud (JASA, 1990) showed that the uniform flat priors for GLM's can lead to improper posterior distributions thus making them undesirable. In such cases, the Markov Chain struggles to converge. Even if it converges, results are unreliable.\n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset.\nmodelClass: Object representing the type of regression, which is Negative Binomial Regression in our case.\nprior: A type representing the prior. In this case, it is the Uniform prior.\nh: A parameter used in setting the priors.\nsim_size: The number of samples to be drawn during inference.\n\nExample\n\njulia> using CRRao, RDatasets, StableRNGs\n\njulia> CRRao.set_rng(StableRNG(123))\nStableRNGs.LehmerRNG(state=0x000000000000000000000000000000f7)\n\njulia> sanction = dataset(\"Zelig\", \"sanction\");\n\njulia> container = @fitmodel(Num ~ Target + Coop + NCost, sanction, NegBinomRegression(), Prior_Uniform());\n\n\n\n\n\n","category":"function"},{"location":"#CRRao.fitmodel-14","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::PoissonRegression, prior::Prior_Laplace, h::Float64 = 0.1, sim_size::Int64 = 10000)\n\nFit a Bayesian Poisson Regression model on the input data with a Laplace prior.\n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset.\nmodelClass: Object representing the type of regression, which is Poisson Regression in our case.\nprior: A type representing the prior. In this case, it is the Laplace prior.\nh: A parameter used in setting the priors.\nsim_size: The number of samples to be drawn during inference.\n\nExample\n\njulia> using CRRao, RDatasets, StableRNGs\n\njulia> CRRao.set_rng(StableRNG(123))\nStableRNGs.LehmerRNG(state=0x000000000000000000000000000000f7)\n\njulia> sanction = dataset(\"Zelig\", \"sanction\");\n\njulia> container = @fitmodel(Num ~ Target + Coop + NCost, sanction, PoissonRegression(), Prior_Laplace());\n\n\n\n\n\n","category":"function"},{"location":"#CRRao.fitmodel-15","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LinearRegression, prior::Prior_Cauchy, h::Float64 = 1.0, sim_size::Int64 = 10000)\n\nFit a Bayesian Poisson Regression model on the input data with a Cauchy prior.\n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset.\nmodelClass: Object representing the type of regression, which is Poisson Regression in our case.\nprior: A type representing the prior. In this case, it is the Cauchy prior.\nsim_size: The number of samples to be drawn during inference.\n\nExample\n\njulia> using CRRao, RDatasets, StableRNGs\n\njulia> CRRao.set_rng(StableRNG(123))\nStableRNGs.LehmerRNG(state=0x000000000000000000000000000000f7)\n\njulia> sanction = dataset(\"Zelig\", \"sanction\");\n\njulia> container = @fitmodel(Num ~ Target + Coop + NCost, sanction, PoissonRegression(), Prior_Cauchy());\n\n\n\n\n\n","category":"function"},{"location":"#CRRao.fitmodel-16","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::PoissonRegression, prior::Prior_Ridge, h::Float64 = 0.1, sim_size::Int64 = 10000)\n\nFit a Bayesian Poisson Regression model on the input data with a Ridge prior.\n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset.\nmodelClass: Object representing the type of regression, which is Poisson Regression in our case.\nprior: A type representing the prior. In this case, it is the Ridge prior.\nh: A parameter used in setting the priors.\nsim_size: The number of samples to be drawn during inference.\n\nExample\n\njulia> using CRRao, RDatasets, StableRNGs\n\njulia> CRRao.set_rng(StableRNG(123))\nStableRNGs.LehmerRNG(state=0x000000000000000000000000000000f7)\n\njulia> sanction = dataset(\"Zelig\", \"sanction\");\n\njulia> container = @fitmodel(Num ~ Target + Coop + NCost, sanction, PoissonRegression(), Prior_Ridge());\n\n\n\n\n\n","category":"function"},{"location":"#CRRao.fitmodel-17","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::PoissonRegression, prior::Prior_TDist, h::Float64 = 2.0, sim_size::Int64 = 10000)\n\nFit a Bayesian Poisson Regression model on the input data with a t(ν) distributed prior.\n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset.\nmodelClass: Object representing the type of regression, which is Poisson Regression in our case.\nprior: A type representing the prior. In this case, it is the TDist prior.\nh: A parameter used in setting the priors.\nsim_size: The number of samples to be drawn during inference.\n\nExample\n\njulia> using CRRao, RDatasets, StableRNGs\n\njulia> CRRao.set_rng(StableRNG(123))\nStableRNGs.LehmerRNG(state=0x000000000000000000000000000000f7)\n\njulia> sanction = dataset(\"Zelig\", \"sanction\");\n\njulia> container = @fitmodel(Num ~ Target + Coop + NCost, sanction, PoissonRegression(), Prior_TDist());\n\n\n\n\n\n","category":"function"},{"location":"#CRRao.fitmodel-18","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LinearRegression, prior::Prior_Ridge, h::Float64 = 0.01, sim_size::Int64 = 10000)\n\nFit a Bayesian Linear Regression model on the input data with a Ridge prior.\n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset.\nmodelClass: Object representing the type of regression, which is Linear Regression in our case.\nprior: A type representing the prior. In this case, it is the Ridge prior.\nh: A parameter used in setting the priors.\nsim_size: The number of samples to be drawn during inference.\n\nExample\n\njulia> using CRRao, RDatasets, StableRNGs\n\njulia> CRRao.set_rng(StableRNG(123))\nStableRNGs.LehmerRNG(state=0x000000000000000000000000000000f7)\n\njulia> df = dataset(\"datasets\", \"mtcars\");\n\njulia> container = @fitmodel(MPG ~ HP + WT + Gear, df, LinearRegression(), Prior_Ridge());\n\n\n\n\n\n","category":"function"},{"location":"#CRRao.fitmodel-19","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::CRRaoLink, prior::Prior_Uniform, h::Float64 = 0.01, level::Float64 = 0.95, sim_size::Int64 = 10000)\n\nFit a Bayesian Logistic Regression model on the input data with a Uniform prior. \n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset.\nmodelClass: Object representing the type of regression, which is Logistic Regression in our case.\nprior: A type representing the prior. In this case, it is the Uniform prior.\nLink: A type representing the link function to be used. Possible values are Logit(), Probit(), Cloglog() and Cauchit().\nh: A parameter used in setting the priors.\nsim_size: The number of samples to be drawn during inference.\n\nExample\n\njulia> using CRRao, RDatasets, StableRNGs\n\njulia> CRRao.set_rng(StableRNG(123))\nStableRNGs.LehmerRNG(state=0x000000000000000000000000000000f7)\n\njulia> turnout = dataset(\"Zelig\", \"turnout\");\n\njulia> container_logit = @fitmodel(Vote ~ Age + Race + Income + Educate, turnout, LogisticRegression(), Logit(), Prior_Uniform());\n\njulia> container_probit = @fitmodel(Vote ~ Age + Race + Income + Educate, turnout, LogisticRegression(), Probit(), Prior_Uniform());\n\njulia> container_cloglog = @fitmodel(Vote ~ Age + Race + Income + Educate, turnout, LogisticRegression(), Cloglog(), Prior_Uniform());\n\njulia> container_cauchit = @fitmodel(Vote ~ Age + Race + Income + Educate, turnout, LogisticRegression(), Cauchit(), Prior_Uniform());\n\n\n\n\n\n","category":"function"},{"location":"#CRRao.fitmodel-20","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::CRRaoLink, prior::Prior_TDist, h::Float64 = 1.0, level::Float64 = 0.95, sim_size::Int64 = 10000)\n\nFit a Bayesian Logistic Regression model on the input data with a T-Dist prior. \n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset.\nmodelClass: Object representing the type of regression, which is Logistic Regression in our case.\nprior: A type representing the prior. In this case, it is the T-Dist prior.\nLink: A type representing the link function to be used. Possible values are Logit(), Probit(), Cloglog() and Cauchit().\nh: A parameter used in setting the priors.\nsim_size: The number of samples to be drawn during inference.\n\nExample\n\njulia> using CRRao, RDatasets, StableRNGs\n\njulia> CRRao.set_rng(StableRNG(123))\nStableRNGs.LehmerRNG(state=0x000000000000000000000000000000f7)\n\njulia> turnout = dataset(\"Zelig\", \"turnout\");\n\njulia> container_logit = @fitmodel(Vote ~ Age + Race + Income + Educate, turnout, LogisticRegression(), Logit(), Prior_TDist());\n\njulia> container_probit = @fitmodel(Vote ~ Age + Race + Income + Educate, turnout, LogisticRegression(), Probit(), Prior_TDist());\n\njulia> container_cloglog = @fitmodel(Vote ~ Age + Race + Income + Educate, turnout, LogisticRegression(), Cloglog(), Prior_TDist());\n\njulia> container_cauchit = @fitmodel(Vote ~ Age + Race + Income + Educate, turnout, LogisticRegression(), Cauchit(), Prior_TDist());\n\n\n\n\n\n","category":"function"},{"location":"#CRRao.fitmodel-Tuple{StatsModels.FormulaTerm, DataFrames.DataFrame, LinearRegression}","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LinearRegression)\n\nFit an OLS Linear Regression model on the input data. Uses the lm method from the GLM package under the hood.\n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset.\nmodelClass: Object representing the type of regression, which is Linear Regression in our case.\n\njulia> using CRRao, RDatasets, StatsPlots\n\njulia> df = dataset(\"datasets\", \"mtcars\");\n\njulia> container = @fitmodel(MPG ~ HP + WT + Gear, df, LinearRegression());\n\njulia> coeftable(container);\n\njulia> sigma(container);\n\njulia> loglikelihood(container);\n\njulia> aic(container);\n\njulia> bic(container);\n\njulia> r2(container);\n\njulia> adjr2(container);\n\njulia> predict(container);\n\njulia> residuals(container);\n\njulia> cooksdistance(container);\n\njulia> plot(cooksdistance(container));\n\n\n\n\n\n","category":"method"},{"location":"#CRRao.fitmodel-Tuple{StatsModels.FormulaTerm, DataFrames.DataFrame, LogisticRegression, Cauchit}","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::Cauchit)\n\nFit a Logistic Regression model on the input data using the Cauchit link. Uses the glm method from the GLM package under the hood. ```\n\n\n\n\n\n","category":"method"},{"location":"#CRRao.fitmodel-Tuple{StatsModels.FormulaTerm, DataFrames.DataFrame, LogisticRegression, Cloglog}","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::Cloglog)\n\nFit a Logistic Regression model on the input data using the Cloglog link. Uses the glm method from the GLM package under the hood. ```\n\n\n\n\n\n","category":"method"},{"location":"#CRRao.fitmodel-Tuple{StatsModels.FormulaTerm, DataFrames.DataFrame, LogisticRegression, Logit}","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::Logit)\n\nFit a Logistic Regression model on the input data using the Logit link. Uses the glm method from the GLM package under the hood.\n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset. \nmodelClass: Object representing the type of regression, which is Logistic Regression in this case.\nLink: A type to specify the link function to be used, which is Logit in this case.\n\njulia> using CRRao, RDatasets\n\njulia> turnout = dataset(\"Zelig\", \"turnout\");\n\njulia> container = @fitmodel(Vote ~ Age + Race + Income + Educate, turnout, LogisticRegression(), Logit());\n\njulia> coeftable(container);\n\njulia> loglikelihood(container);\n\njulia> aic(container);\n\njulia> bic(container);\n\n\n\n\n\n","category":"method"},{"location":"#CRRao.fitmodel-Tuple{StatsModels.FormulaTerm, DataFrames.DataFrame, LogisticRegression, Probit}","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::LogisticRegression, Link::Probit)\n\nFit a Logistic Regression model on the input data using the Probit link. Uses the glm method from the GLM package under the hood.\n\n\n\n\n\n","category":"method"},{"location":"#CRRao.fitmodel-Tuple{StatsModels.FormulaTerm, DataFrames.DataFrame, NegBinomRegression}","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::NegBinomRegression)\n\nFit a Negative Binomial Regression model on the input data (with the default link function being the Log link). Uses the glm method from the GLM package under the hood.\n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset. \nmodelClass: Object representing the type of regression, which is Negative Binomial Regression in this case.\n\nExample\n\njulia> using CRRao, RDatasets\n\njulia> sanction = dataset(\"Zelig\", \"sanction\");\n\njulia> container = @fitmodel(Num ~ Target + Coop + NCost, sanction, NegBinomRegression());\n\n\n\n\n\n","category":"method"},{"location":"#CRRao.fitmodel-Tuple{StatsModels.FormulaTerm, DataFrames.DataFrame, PoissonRegression}","page":"Home","title":"CRRao.fitmodel","text":"fitmodel(formula::FormulaTerm, data::DataFrame, modelClass::PoissonRegression)\n\nFit a Poisson Regression model on the input data (with the default link function being the Log link). Uses the glm method from the GLM package under the hood.\n\nArguments\n\nformula: A formula term representing dependencies between the columns in the dataset.\ndata: The dataset. \nmodelClass: Object representing the type of regression, which is Poisson Regression in this case.xc\n\nExample\n\njulia> using CRRao, RDatasets\n\njulia> sanction = dataset(\"Zelig\", \"sanction\");\n\njulia> container = @fitmodel(Num ~ Target + Coop + NCost, sanction, PoissonRegression());\n\n\n\n\n\n","category":"method"},{"location":"#CRRao.set_rng-Tuple{Any}","page":"Home","title":"CRRao.set_rng","text":"using StableRNGs\nCRRao.set_rng(StableRNG(1234))\n\n\n\n\n\n","category":"method"},{"location":"#CRRao.@fitmodel-Tuple{Any, Vararg{Any}}","page":"Home","title":"CRRao.@fitmodel","text":"   @fitmodel(formula, args...)\n\nMacro for calling fitmodel without using @formula to create the formula. \n\nExample\n\nusing CRRao, RDatasets\nsanction = dataset(\"Zelig\", \"sanction\")\nmodel = @fitmodel(Num ~ Target + Coop + NCost, sanction, NegBinomRegression())\n\n\n\n\n\n","category":"macro"}]
}
